import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Function to monitor memory usage
def print_memory(stage=""):
    if torch.cuda.is_available():
        allocated = torch.cuda.memory_allocated(0) / (1024 ** 3)
        reserved = torch.cuda.memory_reserved(0) / (1024 ** 3)
        print(f"Memory ({stage}): Allocated: {allocated:.2f} GB, Reserved: {reserved:.2f} GB")

# Clear cache to free up memory
if torch.cuda.is_available():
    torch.cuda.empty_cache()

# Print the start of the text generation test
print("\n--- Starting AgriLens AI Text Generation Test ---")

# Define the path to the pre-trained model
model_path = "/kaggle/input/gemma-3n/transformers/gemma-3n-e2b-it/1"

try:
    # Load the tokenizer and model from the specified path
    print("Loading tokenizer and model...")
    text_tokenizer = AutoTokenizer.from_pretrained(model_path)
    text_model = AutoModelForCausalLM.from_pretrained(model_path, torch_dtype=torch.float16).to("cpu")
    print("Tokenizer and model loaded.")

    # Print memory usage before text generation
    print_memory("Before Text Gen")

    # Define the agricultural prompt
    prompt_agri = """
    Provide a detailed description of the common symptoms of late blight disease in tomato plants.
    Include information on the appearance, progression, and specific parts of the plant affected.
    Also, describe any environmental conditions that favor the development of this disease.
    """

    # Tokenize the input
    inputs_agri = text_tokenizer(prompt_agri, return_tensors="pt").to("cpu")

    # Print memory usage after moving inputs to device
    print_memory("After Inputs To Device")

    # Generate the response
    with torch.no_grad():
        outputs_agri = text_model.generate(**inputs_agri, max_length=500)

    # Print memory usage after text generation
    print_memory("After Text Gen")

    # Decode and print the result
    result_agri = text_tokenizer.decode(outputs_agri[0], skip_special_tokens=True)
    print("\n--- Model Output for Agricultural Query ---")
    print(result_agri)

except Exception as e:
    print(f"An error occurred: {e}")